import { SemVer } from 'semver';
import { PhpExtensionDetails, PhpExtensionIni, PhpExtensionInis, PhpExtensionName, PhpInfo, PhpIni, PhpParsedInfo } from './types';
import { PHPApi } from './PHPApi';
import { Service } from '@radic/core';
export declare type PhpMajorMinorVersion = string;
export declare class PHP implements PhpInfo {
    readonly info: PhpInfo;
    readonly semver: SemVer;
    readonly date: Date;
    readonly api: PHPApi;
    protected fpmService: Service;
    constructor(info: PhpInfo);
    equals(php: PHP): boolean;
    get fpmServiceName(): string;
    getFPMService(): Promise<Service>;
    protected getSemver(version: string): SemVer;
    get extensions(): Record<PhpExtensionName, PhpExtensionIni>;
    get enabledExtensions(): Record<PhpExtensionName, PhpExtensionIni>;
    get availableExtensions(): Record<PhpExtensionName, PhpExtensionDetails>;
    get disabledExtensions(): Record<PhpExtensionName, PhpExtensionDetails>;
    get config(): PhpIni;
    get parsed(): PhpParsedInfo;
    get bin(): string;
    get shortVersion(): PhpMajorMinorVersion;
    get version(): string;
    get iniFiles(): string[];
    get isCLI(): boolean;
    get isFPM(): boolean;
    get apiKey(): string;
    isApi(api: PHPApi): boolean;
    hasExtension(name: string): boolean;
    hasEnabledExtension(name: string): boolean;
    hasAvailableExtension(name: string): boolean;
    getEnabledExtension<T extends PhpExtensionName>(name: T): PhpExtensionInis[T];
    isExtensionEnabled(name: any): boolean;
    enableExtension(name: PhpExtensionName | PhpExtensionName[], api?: PHPApi.Key | 'all' | string): string;
    disableExtension(name: PhpExtensionName | PhpExtensionName[], api?: PHPApi.Key | 'all' | string): string;
}
